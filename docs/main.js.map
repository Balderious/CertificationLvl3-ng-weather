{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app.routing.ts","./src/app/current-conditions/current-conditions.component.ts","./src/app/forecasts-list/forecasts-list.component.ts","./src/app/location.service.ts","./src/app/main-page/main-page.component.ts","./src/app/shared/components/inputAutocomplete/component/option.component.ts","./src/app/shared/components/inputAutocomplete/input-autocomplete.component.ts","./src/app/shared/components/state-button/state-button.component.ts","./src/app/shared/directives/hightlightText.directive.ts","./src/app/shared/pipes/dataFilter.pipe.ts","./src/app/weather.service.ts","./src/app/zipcode-entry/fakeCountriesListAvailable.ts","./src/app/zipcode-entry/zipcode-entry.component.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport {SwPush, SwUpdate} from '@angular/service-worker';\r\nimport {interval} from 'rxjs';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n    constructor() {\r\n\r\n    }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ZipcodeEntryComponent } from './zipcode-entry/zipcode-entry.component';\r\nimport {LocationService} from \"./location.service\";\r\nimport { ForecastsListComponent } from './forecasts-list/forecasts-list.component';\r\nimport {WeatherService} from \"./weather.service\";\r\nimport { CurrentConditionsComponent } from './current-conditions/current-conditions.component';\r\nimport { MainPageComponent } from './main-page/main-page.component';\r\nimport {RouterModule} from \"@angular/router\";\r\nimport {routing} from \"./app.routing\";\r\nimport {HttpClientModule} from \"@angular/common/http\";\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { environment } from '../environments/environment';\r\nimport {StateButtonComponent} from './shared/components/state-button/state-button.component';\r\nimport { InputAutocompleteComponent } from './shared/components/inputAutocomplete/input-autocomplete.component';\r\nimport { OptionComponent } from './shared/components/inputAutocomplete/component/option.component';\r\nimport {DataFilterPipe} from './shared/pipes/dataFilter.pipe';\r\nimport {HightlightTextDirective} from './shared/directives/hightlightText.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ZipcodeEntryComponent,\r\n    ForecastsListComponent,\r\n    CurrentConditionsComponent,\r\n    MainPageComponent,\r\n    StateButtonComponent,\r\n    InputAutocompleteComponent,\r\n    OptionComponent,\r\n    DataFilterPipe,\r\n    HightlightTextDirective,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    RouterModule,\r\n    routing,\r\n    ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production }),\r\n  ],\r\n  providers: [LocationService, WeatherService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { ModuleWithProviders }  from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {ForecastsListComponent} from \"./forecasts-list/forecasts-list.component\";\r\nimport {MainPageComponent} from \"./main-page/main-page.component\";\r\n\r\nconst appRoutes: Routes = [\r\n  {\r\n    path: '', component: MainPageComponent\r\n  },\r\n  {\r\n    path: 'forecast/:zipcode', component: ForecastsListComponent\r\n  }\r\n];\r\nexport const routing: ModuleWithProviders<any> = RouterModule.forRoot(appRoutes, { relativeLinkResolution: 'legacy' });\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {WeatherService} from \"../weather.service\";\r\nimport {LocationService} from \"../location.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {log} from 'blue-harvest/dist/action_helpers/logger';\r\n\r\n@Component({\r\n  selector: 'app-current-conditions',\r\n  templateUrl: './current-conditions.component.html',\r\n  styleUrls: ['./current-conditions.component.css']\r\n})\r\nexport class CurrentConditionsComponent implements OnInit, OnDestroy {\r\n  // Get store (Subject) from weatherService to be use in the template with an async\r\n  public currentConditionsList = this.weatherService.getCurrentConditions();\r\n\r\n  constructor(private weatherService : WeatherService, private locationService : LocationService, private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    // Auto refresh system. Possibility to specify the delay (here: 30 seconds as requested)\r\n    this.locationService.startAutoRefreshLocationsCurrentConditions(30000);\r\n  }\r\n\r\n  showForecast(zipcode : string){\r\n    this.router.navigate(['/forecast', zipcode])\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.locationService.stopAutoRefreshLocationsCurrentConditions();\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport {WeatherService} from '../weather.service';\r\nimport {ActivatedRoute} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-forecasts-list',\r\n  templateUrl: './forecasts-list.component.html',\r\n  styleUrls: ['./forecasts-list.component.css']\r\n})\r\nexport class ForecastsListComponent {\r\n\r\n  zipcode: string;\r\n  forecast: any;\r\n\r\n  constructor(private weatherService: WeatherService, route : ActivatedRoute) {\r\n    route.params.subscribe(params => {\r\n      this.zipcode = params['zipcode'];\r\n      console.log(\"params['zipcode'] = \", this.zipcode);\r\n      weatherService.getForecast(this.zipcode)\r\n        .subscribe(data => this.forecast = data);\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {WeatherService} from \"./weather.service\";\r\nimport {Observable, pipe, Subscriber, Subscription, timer} from 'rxjs';\r\n\r\nexport const LOCATIONS : string = \"locations\";\r\n\r\n@Injectable()\r\nexport class LocationService {\r\n\r\n  locations : string[] = [];\r\n  private refreshTimer: Subscription;\r\n\r\n  constructor(private weatherService : WeatherService) {}\r\n\r\n  // Start auto refresh of locations current conditions\r\n  startAutoRefreshLocationsCurrentConditions(delay: number) {\r\n    this.refreshTimer = timer(1, delay).subscribe(\r\n        pipe(() => {\r\n          this.loadLocationsCurrentConditions();\r\n        })\r\n    )\r\n  }\r\n\r\n  // Load current conditions\r\n  loadLocationsCurrentConditions() {\r\n    let locString = localStorage.getItem(LOCATIONS);\r\n    if (locString)\r\n      this.locations = JSON.parse(locString);\r\n    for (let loc of this.locations)\r\n      this.weatherService.addCurrentConditions(loc);\r\n  }\r\n\r\n  addLocation(zipcode : string){\r\n    this.locations.push(zipcode);\r\n    localStorage.setItem(LOCATIONS, JSON.stringify(this.locations));\r\n    this.weatherService.addCurrentConditions(zipcode);\r\n  }\r\n\r\n  removeLocation(zipcode : string){\r\n    let index = this.locations.indexOf(zipcode);\r\n    if (index !== -1){\r\n      this.locations.splice(index, 1);\r\n      localStorage.setItem(LOCATIONS, JSON.stringify(this.locations));\r\n      this.weatherService.removeCurrentConditions(zipcode);\r\n    }\r\n  }\r\n\r\n  // Stop auto refresh system\r\n  stopAutoRefreshLocationsCurrentConditions() {\r\n    this.refreshTimer.unsubscribe();\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  templateUrl: './main-page.component.html'\r\n})\r\nexport class MainPageComponent {\r\n\r\n}\r\n","import {Component, EventEmitter, Input, Output, OnInit, ViewChild, ElementRef, AfterViewInit} from '@angular/core';\nimport {click} from 'blue-harvest';\nimport {fromEvent} from 'rxjs';\n\n@Component({\n  selector: 'app-option',\n  templateUrl: './option.component.html',\n  styleUrls: ['./option.component.css']\n})\nexport class OptionComponent implements AfterViewInit {\n  @ViewChild('option') optionElement!: ElementRef;\n  @Input() optionData!: any;\n  @Input() searchedText!: string\n  @Output() optionSelectedEvent= new EventEmitter<any>();\n\n  ngAfterViewInit(): void {\n    fromEvent(this.optionElement.nativeElement, 'click').subscribe(\n        res => this.optionSelected()\n    );\n  }\n\n  optionSelected() {\n    this.optionSelectedEvent.emit(this.optionData);\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {OptionData} from './interfaces/optionData';\nimport {timer} from 'rxjs';\n\n@Component({\n  selector: 'app-input-autocomplete',\n  templateUrl: './input-autocomplete.component.html',\n  styleUrls: ['./input-autocomplete.component.css']\n})\nexport class InputAutocompleteComponent {\n  @Input() optionsData: OptionData[] = [];\n  @Input() placeholderInput: string;\n  @Output() optionSelectedDataEvent = new EventEmitter<any>()\n  public inputSearchValue: string = '';\n  public isFocus: boolean = false\n\n  constructor() {}\n\n  // If the user choose an item:\n  // 1. Label is loaded in the inputSearchValue to show the selected country name\n  // 2. The data continue to the parent to allow him to recover the zipcode\n  // 3. Close the dropdown\n  getOptionDataSelected(optionSelectedData) {\n    this.inputSearchValue = optionSelectedData.label;\n    this.optionSelectedDataEvent.emit(optionSelectedData);\n    this.isFocus = false\n  }\n\n  // If Focus, the dropdown is showed\n  onFocus() { this.isFocus = true; }\n  // If OnFocus, the dropdown is hidden\n  onFocusOut() {\n    timer(100).subscribe(() => this.isFocus = false)\n  }\n}\n","import {Component, ElementRef, EventEmitter, OnInit, Output, TemplateRef, ViewChild} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Input } from '@angular/core';\nimport {timer} from 'rxjs';\n\n@Component({\n  selector: 'app-state-button',\n  styleUrls: ['./state-button.component.css'],\n  templateUrl: './state-button.component.html',\n})\nexport class StateButtonComponent implements OnInit {\n  // Get the three default states\n  @ViewChild('save') defaultSaveTemplate!: TemplateRef<any>;\n  @ViewChild('loading') defaultLoadingTemplate!: TemplateRef<any>;\n  @ViewChild('saved') defaultSavedTemplate!: TemplateRef<any>;\n  // Three different states of component with html content full customizable.\n  @Input() initialStateTemplate: TemplateRef<any>;\n  @Input() workingStateTemplate: TemplateRef<any>;\n  @Input() doneStateTemplate: TemplateRef<any>;\n  // Notify the parent the button has been clicked.\n  @Output() actionTriggered = new EventEmitter<string>();\n\n  private currentStateTemplate: TemplateRef<any>;\n\n  private actionTimer$ = timer(500);\n  private resetButtonTimer$ = timer(500);\n\n  constructor() {}\n\n  ngOnInit(): void {\n    // Check if the parent sent templates for three states or else load the default templates.\n    if (!this.initialStateTemplate) this.initialStateTemplate = this.defaultSaveTemplate;\n    if (!this.workingStateTemplate) this.workingStateTemplate = this.defaultLoadingTemplate;\n    if (!this.initialStateTemplate) this.doneStateTemplate = this.defaultSavedTemplate;\n\n    this.currentStateTemplate = this.initialStateTemplate;\n  }\n\n  triggerAction() {\n    this.currentStateTemplate = this.workingStateTemplate;\n    this.actionTriggered.emit();\n    // Simple timer observable to visualize the change of state\n    this.actionTimer$.subscribe(\n        () => {\n          this.currentStateTemplate = this.doneStateTemplate;\n          // Reset the button state.\n          this.resetButtonTimer$.subscribe(\n              () => this.currentStateTemplate = this.initialStateTemplate\n          )\n        }\n    );\n  }\n}\n","import {Directive, ElementRef, Input, OnChanges, Renderer2, SimpleChanges} from '@angular/core';\n\n@Directive({\n  selector: '[appHightlightText]'\n})\nexport class HightlightTextDirective implements OnChanges{\n  @Input() highlightingClass: string;\n  @Input() targetedCharacters: string;\n  @Input() content: string;\n\n  constructor(private element: ElementRef, private renderer: Renderer2) { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.content) {\n      return;\n    }\n\n    if (!this.targetedCharacters || !this.targetedCharacters.length || !this.highlightingClass) {\n      this.renderer.setProperty(this.element.nativeElement, 'innerHTML', this.content);\n      return;\n    }\n\n    this.renderer.setProperty(\n        this.element.nativeElement,\n        'innerHTML',\n        this.getHighlightingText()\n    );\n  }\n\n  getHighlightingText() {\n    const filterRe = new RegExp(`(${this.targetedCharacters})`, 'gi');\n    return this.content.replace(filterRe, `<span class=\"${this.highlightingClass}\">$1</span>`);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {OptionData} from '../components/inputAutocomplete/interfaces/optionData';\n\n@Pipe({\n  name: 'dataFilter'\n})\nexport class DataFilterPipe implements PipeTransform {\n\n  transform(items: any[], expectedText: string): OptionData[] {\n    if (!items) {\n      return [];\n    }\n    if(!expectedText) {\n      return items;\n    }\n    expectedText = expectedText.toLocaleLowerCase();\n\n    return items = items.filter(item => {\n      return item.label.toLocaleLowerCase().includes(expectedText);\n    })\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\n\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\ninterface LocalisationConditions {\r\n  zipcode: string;\r\n  data: any\r\n}\r\n\r\n@Injectable()\r\nexport class WeatherService {\r\n\r\n  static URL = 'http://api.openweathermap.org/data/2.5';\r\n  static APPID = '5a4b2d457ecbef9eb2a71e480b947604';\r\n  static ICON_URL = 'https://raw.githubusercontent.com/udacity/Sunshine-Version-2/sunshine_master/app/src/main/res/drawable-hdpi/';\r\n\r\n  private currentConditions = [];\r\n  private currentConditionsSubject = new Subject<LocalisationConditions[]>();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addCurrentConditions(zipcode: string): void {\r\n    // Here we make a request to get the current conditions data from the API. Note the use of backticks and an expression to insert the zipcode\r\n    this.http.get(`${WeatherService.URL}/weather?zip=${zipcode},us&units=imperial&APPID=${WeatherService.APPID}`)\r\n      .subscribe(data => {\r\n        // This process will check if the zipcode already was loaded in the store.\r\n        let alreadyExist = this.currentConditions.find(element => element.zip === zipcode);\r\n        if (alreadyExist) {\r\n          // Yes ? then the data will be updated.\r\n          alreadyExist = {...alreadyExist, data: data};\r\n          this.currentConditions.map(item => item.zip === alreadyExist.zip ? alreadyExist : item)\r\n        } else {\r\n          // No ? then the data will be added in the store.\r\n          this.currentConditions.push({zip: zipcode, data: data})\r\n        }\r\n        this.currentConditionsSubject.next(this.currentConditions);\r\n      });\r\n  }\r\n\r\n  removeCurrentConditions(zipcode: string) {\r\n    for (let i in this.currentConditions){\r\n      if (this.currentConditions[i].zip == zipcode)\r\n        this.currentConditions.splice(+i, 1);\r\n    }\r\n  }\r\n\r\n  getCurrentConditions(): Observable<any> {\r\n    return this.currentConditionsSubject.asObservable();\r\n  }\r\n\r\n  getForecast(zipcode: string): Observable<any> {\r\n    // Here we make a request to get the forecast data from the API. Note the use of backticks and an expression to insert the zipcode\r\n    return this.http.get(`${WeatherService.URL}/forecast/daily?zip=${zipcode},us&units=imperial&cnt=5&APPID=${WeatherService.APPID}`);\r\n  }\r\n\r\n  getWeatherIcon(id){\r\n    if (id >= 200 && id <= 232)\r\n      return WeatherService.ICON_URL + \"art_storm.png\";\r\n    else if (id >= 501 && id <= 511)\r\n      return WeatherService.ICON_URL + \"art_rain.png\";\r\n    else if (id === 500 || (id >= 520 && id <= 531))\r\n      return WeatherService.ICON_URL + \"art_light_rain.png\";\r\n    else if (id >= 600 && id <= 622)\r\n      return WeatherService.ICON_URL + \"art_snow.png\";\r\n    else if (id >= 801 && id <= 804)\r\n      return WeatherService.ICON_URL + \"art_clouds.png\";\r\n    else if (id === 741 || id === 761)\r\n      return WeatherService.ICON_URL + \"art_fog.png\";\r\n    else\r\n      return WeatherService.ICON_URL + \"art_clear.png\";\r\n  }\r\n\r\n}\r\n","export const fakeCountriesListAvailable = [\r\n    { label: 'New York', value: '10001' },\r\n    { label: 'Rancho Cordova', value: '95742' },\r\n    { label: 'Broward County', value: '33311' },\r\n    { label: 'Kings County', value: '11203' },\r\n    { label: 'Cook County', value: '60602' },\r\n    { label: 'Jefferson County', value: '40258' },\r\n    { label: 'France', value: '25000' },\r\n    { label: 'Australia', value: '2024' },\r\n]\r\n","import {Component, ElementRef, ViewChild} from '@angular/core';\r\nimport {LocationService} from '../location.service';\r\nimport {OptionData} from '../shared/components/inputAutocomplete/interfaces/optionData';\r\nimport {fakeCountriesListAvailable} from './fakeCountriesListAvailable';\r\n\r\n@Component({\r\n  selector: 'app-zipcode-entry',\r\n  templateUrl: './zipcode-entry.component.html'\r\n})\r\nexport class ZipcodeEntryComponent {\r\n  @ViewChild('zipcode') zipcode!: ElementRef;\r\n  // Get mock data to be used with inputAutocomplete\r\n  public countriesDataMock: OptionData[] = fakeCountriesListAvailable;\r\n\r\n  constructor(private service : LocationService) {}\r\n\r\n  addLocation(){\r\n    this.service.addLocation(this.zipcode.nativeElement.value);\r\n  }\r\n\r\n  // Retrieve the country data selected by the user to send the zipcode in the appropriate input.\r\n  getCountryData(countrySelectedData: any) {\r\n    this.zipcode.nativeElement.value = countrySelectedData.value;\r\n  }\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n"],"names":["Component","WeatherService","LocationService","Router","CurrentConditionsComponent","constructor","weatherService","locationService","router","getCurrentConditions","ngOnInit","startAutoRefreshLocationsCurrentConditions","showForecast","zipcode","navigate","ngOnDestroy","stopAutoRefreshLocationsCurrentConditions","selector","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}